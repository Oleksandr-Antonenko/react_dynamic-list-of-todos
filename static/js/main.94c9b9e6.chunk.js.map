{"version":3,"sources":["api.ts","types/FilteringOptions.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/todosFiltering.ts","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","Error","FilteringOptions","TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","setFilteringOption","filteringOption","setSearchQuery","searchQuery","value","onChange","e","target","Object","entries","key","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","All","isLoading","setIsLoading","hasErrors","setHasErrors","catch","finally","todosFilteredByStatus","useMemo","filter","Active","Completed","getTodosFilteredByStatus","todosIncludeSearchQuery","trim","length","toLowerCase","includes","getTodosIncludeSearchQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94c9b9e6.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilteringOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    setSelectedTodo,\n    selectedTodo,\n  },\n) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodo?.id === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye': selectedTodo?.id !== todo.id,\n                      'fa-eye-slash': selectedTodo?.id === todo.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilteringOptions } from '../../types/FilteringOptions';\n\ntype Props = {\n  setFilteringOption: (option: FilteringOptions) => void,\n  filteringOption: string,\n  setSearchQuery: (query: string) => void,\n  searchQuery: string,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    setFilteringOption,\n    filteringOption,\n    setSearchQuery,\n    searchQuery,\n  },\n) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filteringOption}\n          onChange={e => setFilteringOption(e.target.value as FilteringOptions)}\n        >\n          {Object.entries(FilteringOptions).map(([key, value]) => (\n            <option key={value} value={value}>{key}</option>\n          ))}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={e => setSearchQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setSearchQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  setSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div\n        className=\"modal-background\"\n      />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilteringOptions } from './types/FilteringOptions';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodosFilteredByStatus, getTodosIncludeSearchQuery } from './helpers/todosFiltering';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteringOption, setFilteringOption] = useState(FilteringOptions.All);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasErrors, setHasErrors] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(() => setHasErrors(true))\n      .finally(() => setIsLoading(false));\n    // console.log(todos);\n  }, []);\n\n  const todosFilteredByStatus = useMemo(() => {\n    return getTodosFilteredByStatus(todos, filteringOption);\n  }, [filteringOption, isLoading]);\n\n  const todosIncludeSearchQuery = useMemo(() => {\n    return getTodosIncludeSearchQuery(todosFilteredByStatus, searchQuery);\n  }, [filteringOption, searchQuery, isLoading]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilteringOption={setFilteringOption}\n                filteringOption={filteringOption}\n                setSearchQuery={setSearchQuery}\n                searchQuery={searchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {hasErrors && <p>Something went wrong try again later!</p>}\n              {!isLoading && !hasErrors\n                && (\n                  <TodoList\n                    todos={todosIncludeSearchQuery}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { FilteringOptions } from '../types/FilteringOptions';\n\nexport const getTodosFilteredByStatus = (\n  todos: Todo[],\n  filteringOption: FilteringOptions,\n) => {\n  return todos.filter(({ completed }) => {\n    switch (filteringOption) {\n      case FilteringOptions.Active:\n        return !completed;\n\n      case FilteringOptions.Completed:\n        return completed;\n\n      default:\n        break;\n    }\n\n    return true;\n  });\n};\n\nexport const getTodosIncludeSearchQuery = (\n  todos: Todo[],\n  searchQuery: string,\n) => {\n  if (!searchQuery.trim().length) {\n    return todos;\n  }\n\n  return todos.filter(({ title }) => {\n    return title.toLowerCase().includes(searchQuery.toLowerCase());\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}